# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import logging_pb2 as logging__pb2


class LoggingServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartLogging = channel.unary_unary(
        '/mavsdk.rpc.logging.LoggingService/StartLogging',
        request_serializer=logging__pb2.StartLoggingRequest.SerializeToString,
        response_deserializer=logging__pb2.StartLoggingResponse.FromString,
        )
    self.StopLogging = channel.unary_unary(
        '/mavsdk.rpc.logging.LoggingService/StopLogging',
        request_serializer=logging__pb2.StopLoggingRequest.SerializeToString,
        response_deserializer=logging__pb2.StopLoggingResponse.FromString,
        )
    self.SubscribeLoggingRaw = channel.unary_stream(
        '/mavsdk.rpc.logging.LoggingService/SubscribeLoggingRaw',
        request_serializer=logging__pb2.SubscribeLoggingRawRequest.SerializeToString,
        response_deserializer=logging__pb2.LoggingRawResponse.FromString,
        )


class LoggingServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StartLogging(self, request, context):
    """Send command to start streaming logging data over MAVLink
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StopLogging(self, request, context):
    """Send command to stop streaming logging data over MAVLink
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeLoggingRaw(self, request, context):
    """Subscribe to logging messages
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoggingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartLogging': grpc.unary_unary_rpc_method_handler(
          servicer.StartLogging,
          request_deserializer=logging__pb2.StartLoggingRequest.FromString,
          response_serializer=logging__pb2.StartLoggingResponse.SerializeToString,
      ),
      'StopLogging': grpc.unary_unary_rpc_method_handler(
          servicer.StopLogging,
          request_deserializer=logging__pb2.StopLoggingRequest.FromString,
          response_serializer=logging__pb2.StopLoggingResponse.SerializeToString,
      ),
      'SubscribeLoggingRaw': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeLoggingRaw,
          request_deserializer=logging__pb2.SubscribeLoggingRawRequest.FromString,
          response_serializer=logging__pb2.LoggingRawResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mavsdk.rpc.logging.LoggingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
